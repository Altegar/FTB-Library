plugins {
	id "com.github.johnrengelman.shadow" version "5.0.0"
	id "com.matthewprenger.cursegradle"
}

def ENV = System.getenv()

configurations {
	shadow
}

architectury {
	platformSetupLoomIde()
}

minecraft {
	accessWidener = file("src/main/resources/ftbguilibrary.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${rootProject.architectury.minecraft}"
	mappings minecraft.officialMojangMappings()
	modCompile "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modCompile "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
	modCompile "me.shedaniel:architectury:${rootProject.architectury_version}:fabric"

	modCompileOnly("io.github.prospector:modmenu:${rootProject.mod_menu_version}")

	modImplementation("me.shedaniel:RoughlyEnoughItems-api:${rootProject.rei_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime("me.shedaniel:RoughlyEnoughItems:${rootProject.rei_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	compileOnly(project(path: ":common")) {
		transitive = false
	}
	runtimeOnly(project(path: ":common", configuration: "transformDevelopmentFabric")) {
		transitive = false
	}
	shadow(project(path: ":common", configuration: "transformProductionFabric")) {
		transitive = false
	}
}

processResources {
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
	inputs.property "version", project.version
}

shadowJar {
	configurations = [project.configurations.shadow]
	classifier "shadow"
}

remapJar {
	dependsOn(shadowJar)
	input.set(shadowJar.archivePath)
	archiveClassifier = "fabric"
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id_fabric
			releaseType = "release"
			addGameVersion "Fabric"
			addGameVersion "1.16.2"
			addGameVersion "1.16.3"
			addGameVersion "1.16.4"
			addGameVersion "1.16.5"
			mainArtifact(remapJar.archivePath)
			relations {
				requiredDependency 'architectury-fabric'
				optionalDependency 'roughly-enough-items'
			}
			changelog = getGitChangelog
			changelogType = 'markdown'
		}
	}
}